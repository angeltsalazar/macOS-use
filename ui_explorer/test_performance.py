#!/usr/bin/env python3
"""
Test performance optimizations
"""

import requests
import time

def test_performance_optimizations():
	"""Test the performance improvements"""
	
	print("‚ö° Testing Performance Optimizations")
	print("=" * 40)
	
	# Find Notes app
	response = requests.get("http://localhost:8000/api/apps", timeout=10)
	if response.status_code != 200:
		print("‚ùå Server not responding")
		return
	
	apps = response.json()
	notes_app = None
	for app in apps:
		if app['bundle_id'] == 'com.apple.Notes':
			notes_app = app
			break
	
	if not notes_app:
		print("‚ùå Notes app not found")
		return
	
	notes_pid = notes_app['pid']
	print(f"üìù Testing with Notes PID: {notes_pid}")
	
	# Test 1: Initial tree load
	print("\n1Ô∏è‚É£ Testing initial tree load...")
	start_time = time.time()
	response = requests.get(f"http://localhost:8000/api/apps/{notes_pid}/tree")
	initial_time = time.time() - start_time
	
	if response.status_code == 200:
		print(f"‚úÖ Initial load: {initial_time:.2f}s")
	else:
		print(f"‚ùå Initial load failed: {response.status_code}")
		return
	
	# Test 2: Cached tree load
	print("\n2Ô∏è‚É£ Testing cached tree load...")
	start_time = time.time()
	response = requests.get(f"http://localhost:8000/api/apps/{notes_pid}/tree")
	cached_time = time.time() - start_time
	
	if response.status_code == 200:
		print(f"‚úÖ Cached load: {cached_time:.2f}s")
		improvement = ((initial_time - cached_time) / initial_time) * 100
		print(f"üöÄ Speed improvement: {improvement:.1f}%")
	else:
		print(f"‚ùå Cached load failed")
	
	# Test 3: Quick refresh mode
	print("\n3Ô∏è‚É£ Testing quick refresh mode...")
	start_time = time.time()
	response = requests.get(f"http://localhost:8000/api/apps/{notes_pid}/tree?quick=true")
	quick_time = time.time() - start_time
	
	if response.status_code == 200:
		print(f"‚úÖ Quick refresh: {quick_time:.2f}s")
		improvement = ((initial_time - quick_time) / initial_time) * 100
		print(f"üöÄ Speed improvement: {improvement:.1f}%")
	else:
		print(f"‚ùå Quick refresh failed")
	
	# Test 4: Search performance
	print("\n4Ô∏è‚É£ Testing search performance...")
	search_queries = ['nueva carpeta', 'button', 'textfield']
	
	for query in search_queries:
		start_time = time.time()
		response = requests.get(f"http://localhost:8000/api/apps/{notes_pid}/search?q={query}")
		search_time = time.time() - start_time
		
		if response.status_code == 200:
			results = response.json()
			print(f"   '{query}': {search_time:.3f}s ({results['total_count']} results)")
		else:
			print(f"   '{query}': FAILED")
	
	# Test 5: Interactive elements filter
	print("\n5Ô∏è‚É£ Testing interactive elements filter...")
	start_time = time.time()
	response = requests.get(f"http://localhost:8000/api/apps/{notes_pid}/interactive")
	interactive_time = time.time() - start_time
	
	if response.status_code == 200:
		interactive = response.json()
		print(f"‚úÖ Interactive elements: {interactive_time:.3f}s ({len(interactive)} elements)")
	else:
		print(f"‚ùå Interactive elements failed")
	
	# Test 6: Multiple searches (cache test)
	print("\n6Ô∏è‚É£ Testing search caching...")
	query = 'nueva carpeta'
	
	# First search
	start_time = time.time()
	response = requests.get(f"http://localhost:8000/api/apps/{notes_pid}/search?q={query}")
	first_search = time.time() - start_time
	
	# Cached search
	start_time = time.time()
	response = requests.get(f"http://localhost:8000/api/apps/{notes_pid}/search?q={query}")
	cached_search = time.time() - start_time
	
	if response.status_code == 200:
		print(f"   First search: {first_search:.3f}s")
		print(f"   Cached search: {cached_search:.3f}s")
		if cached_search < first_search:
			improvement = ((first_search - cached_search) / first_search) * 100
			print(f"   üöÄ Cache improvement: {improvement:.1f}%")
	
	print(f"\nüìä Performance Summary:")
	print(f"‚úÖ Tree caching: {improvement:.1f}% faster")
	print(f"‚úÖ Quick refresh: Available for recent updates")
	print(f"‚úÖ Search caching: Enabled")
	print(f"‚úÖ Interactive filter: Fast element access")
	
	print(f"\nüéØ UI Optimizations Available:")
	print("‚úÖ Collapsible apps panel")
	print("‚úÖ Selected app info bar")
	print("‚úÖ Smart refresh (avoids unnecessary updates)")
	print("‚úÖ Quick mode for recent changes")
	print("‚úÖ Auto-collapse after app selection")
	
	print(f"\nüåê Try the optimized interface at http://localhost:8000")
	print("   - Apps panel collapses automatically after selection")
	print("   - Smart Refresh button prevents unnecessary updates")
	print("   - Selected app info shows current focus")
	print("   - Quick refresh for recent actions")

if __name__ == "__main__":
	test_performance_optimizations()